
ATM_UART_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000448  08000450  00010450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000448  08000448  00010450  2**0
                  CONTENTS
  4 .ARM          00000000  08000448  08000448  00010450  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000448  08000450  00010450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000448  08000448  00010448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800044c  0800044c  0001044c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000450  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000450  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000868  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000262  00000000  00000000  00010ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00010f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00010fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eab8  00000000  00000000  00011058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d01  00000000  00000000  0001fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053b9c  00000000  00000000  00020811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000743ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000158  00000000  00000000  00074400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000430 	.word	0x08000430

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000430 	.word	0x08000430

080001d8 <UART2_RxTx_Init>:

int __io_putchar(int at){
	UART2_Write(at);
	return at;
}
void UART2_RxTx_Init(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
/**************Configure UART GPIO Pin*****************/
//	Enable clock to gpioa
	RCC->AHB1ENR |= GPIOAENR;
 80001dc:	4b32      	ldr	r3, [pc, #200]	; (80002a8 <UART2_RxTx_Init+0xd0>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a31      	ldr	r2, [pc, #196]	; (80002a8 <UART2_RxTx_Init+0xd0>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

//	Set PA2 mode to alternate func mode
	GPIOA->MODER |=(1U<<5);
 80001e8:	4b30      	ldr	r3, [pc, #192]	; (80002ac <UART2_RxTx_Init+0xd4>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a2f      	ldr	r2, [pc, #188]	; (80002ac <UART2_RxTx_Init+0xd4>)
 80001ee:	f043 0320 	orr.w	r3, r3, #32
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<4);
 80001f4:	4b2d      	ldr	r3, [pc, #180]	; (80002ac <UART2_RxTx_Init+0xd4>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a2c      	ldr	r2, [pc, #176]	; (80002ac <UART2_RxTx_Init+0xd4>)
 80001fa:	f023 0310 	bic.w	r3, r3, #16
 80001fe:	6013      	str	r3, [r2, #0]
//	Set PA3 mode to alternate func mode
	GPIOA->MODER |=(1U<<7);
 8000200:	4b2a      	ldr	r3, [pc, #168]	; (80002ac <UART2_RxTx_Init+0xd4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a29      	ldr	r2, [pc, #164]	; (80002ac <UART2_RxTx_Init+0xd4>)
 8000206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800020a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<6);
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <UART2_RxTx_Init+0xd4>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a26      	ldr	r2, [pc, #152]	; (80002ac <UART2_RxTx_Init+0xd4>)
 8000212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000216:	6013      	str	r3, [r2, #0]

//	Set PA2 to alternate type to uart_tx that is AF07
	GPIOA->AFR[0] |= (1U<<8);
 8000218:	4b24      	ldr	r3, [pc, #144]	; (80002ac <UART2_RxTx_Init+0xd4>)
 800021a:	6a1b      	ldr	r3, [r3, #32]
 800021c:	4a23      	ldr	r2, [pc, #140]	; (80002ac <UART2_RxTx_Init+0xd4>)
 800021e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000222:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000224:	4b21      	ldr	r3, [pc, #132]	; (80002ac <UART2_RxTx_Init+0xd4>)
 8000226:	6a1b      	ldr	r3, [r3, #32]
 8000228:	4a20      	ldr	r2, [pc, #128]	; (80002ac <UART2_RxTx_Init+0xd4>)
 800022a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800022e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000230:	4b1e      	ldr	r3, [pc, #120]	; (80002ac <UART2_RxTx_Init+0xd4>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a1d      	ldr	r2, [pc, #116]	; (80002ac <UART2_RxTx_Init+0xd4>)
 8000236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800023a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 800023c:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <UART2_RxTx_Init+0xd4>)
 800023e:	6a1b      	ldr	r3, [r3, #32]
 8000240:	4a1a      	ldr	r2, [pc, #104]	; (80002ac <UART2_RxTx_Init+0xd4>)
 8000242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000246:	6213      	str	r3, [r2, #32]
//	Set PA3 to alternate type to uart_tx that is AF07
	GPIOA->AFR[0] |= (1U<<12);
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <UART2_RxTx_Init+0xd4>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a17      	ldr	r2, [pc, #92]	; (80002ac <UART2_RxTx_Init+0xd4>)
 800024e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000252:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000254:	4b15      	ldr	r3, [pc, #84]	; (80002ac <UART2_RxTx_Init+0xd4>)
 8000256:	6a1b      	ldr	r3, [r3, #32]
 8000258:	4a14      	ldr	r2, [pc, #80]	; (80002ac <UART2_RxTx_Init+0xd4>)
 800025a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800025e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <UART2_RxTx_Init+0xd4>)
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	4a11      	ldr	r2, [pc, #68]	; (80002ac <UART2_RxTx_Init+0xd4>)
 8000266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800026a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <UART2_RxTx_Init+0xd4>)
 800026e:	6a1b      	ldr	r3, [r3, #32]
 8000270:	4a0e      	ldr	r2, [pc, #56]	; (80002ac <UART2_RxTx_Init+0xd4>)
 8000272:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000276:	6213      	str	r3, [r2, #32]
/**************Configure UART module*****************/
//	Enable clock access to uart2
	RCC->APB1ENR |= (1U<<17);
 8000278:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <UART2_RxTx_Init+0xd0>)
 800027a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800027c:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <UART2_RxTx_Init+0xd0>)
 800027e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000282:	6413      	str	r3, [r2, #64]	; 0x40
//	config baudrate
	uart_baurate_set(USART2, APB1_Clk, UART_Baudrate);
 8000284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000288:	4909      	ldr	r1, [pc, #36]	; (80002b0 <UART2_RxTx_Init+0xd8>)
 800028a:	480a      	ldr	r0, [pc, #40]	; (80002b4 <UART2_RxTx_Init+0xdc>)
 800028c:	f000 f828 	bl	80002e0 <uart_baurate_set>
//	config the transfer direction
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <UART2_RxTx_Init+0xdc>)
 8000292:	220c      	movs	r2, #12
 8000294:	60da      	str	r2, [r3, #12]
//	Enable UART module
	USART2->CR1 |= CR1_UE;
 8000296:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <UART2_RxTx_Init+0xdc>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <UART2_RxTx_Init+0xdc>)
 800029c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002a0:	60d3      	str	r3, [r2, #12]

}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020000 	.word	0x40020000
 80002b0:	00f42400 	.word	0x00f42400
 80002b4:	40004400 	.word	0x40004400

080002b8 <UART_Read>:
	USART2->CR1 = CR1_TE;
//	Enable UART module
	USART2->CR1 |= CR1_UE;

}
char UART_Read(void){
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
//	check if receive data is not empty
	while (!(USART2->SR & SR_RXNE)){
 80002bc:	bf00      	nop
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <UART_Read+0x24>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f003 0320 	and.w	r3, r3, #32
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f9      	beq.n	80002be <UART_Read+0x6>

	}
	return USART2->DR;
 80002ca:	4b04      	ldr	r3, [pc, #16]	; (80002dc <UART_Read+0x24>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	b2db      	uxtb	r3, r3
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40004400 	.word	0x40004400

080002e0 <uart_baurate_set>:
//	write transmitter data
	USART2->DR = (at & 0xFF);

}

static void uart_baurate_set(USART_TypeDef *USARTx,uint32_t periphClk, uint32_t Baudrate){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_BD(periphClk,Baudrate);
 80002ec:	6879      	ldr	r1, [r7, #4]
 80002ee:	68b8      	ldr	r0, [r7, #8]
 80002f0:	f000 f808 	bl	8000304 <compute_uart_BD>
 80002f4:	4603      	mov	r3, r0
 80002f6:	461a      	mov	r2, r3
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	609a      	str	r2, [r3, #8]
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <compute_uart_BD>:

static uint16_t compute_uart_BD(uint32_t periphClk, uint32_t Baudrate){
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
	return (periphClk + (Baudrate / (2U))) / Baudrate ;
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	085a      	lsrs	r2, r3, #1
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	441a      	add	r2, r3
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	fbb2 f3f3 	udiv	r3, r2, r3
 800031c:	b29b      	uxth	r3, r3

}
 800031e:	4618      	mov	r0, r3
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
	...

0800032c <main>:



char key;

int main(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAENR;
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <main+0x5c>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a14      	ldr	r2, [pc, #80]	; (8000388 <main+0x5c>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
//	SET PA5 AS OUTPUT PIN
	GPIOA->MODER |= (1U<<10);
 800033c:	4b13      	ldr	r3, [pc, #76]	; (800038c <main+0x60>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a12      	ldr	r2, [pc, #72]	; (800038c <main+0x60>)
 8000342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000346:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 8000348:	4b10      	ldr	r3, [pc, #64]	; (800038c <main+0x60>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a0f      	ldr	r2, [pc, #60]	; (800038c <main+0x60>)
 800034e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000352:	6013      	str	r3, [r2, #0]
	UART2_RxTx_Init();
 8000354:	f7ff ff40 	bl	80001d8 <UART2_RxTx_Init>
	while(1){
		key = UART_Read();
 8000358:	f7ff ffae 	bl	80002b8 <UART_Read>
 800035c:	4603      	mov	r3, r0
 800035e:	461a      	mov	r2, r3
 8000360:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <main+0x64>)
 8000362:	701a      	strb	r2, [r3, #0]
		if (key =='1'){
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <main+0x64>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b31      	cmp	r3, #49	; 0x31
 800036a:	d106      	bne.n	800037a <main+0x4e>
			GPIOA->ODR |= LED_PIN;
 800036c:	4b07      	ldr	r3, [pc, #28]	; (800038c <main+0x60>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a06      	ldr	r2, [pc, #24]	; (800038c <main+0x60>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6153      	str	r3, [r2, #20]
 8000378:	e7ee      	b.n	8000358 <main+0x2c>
		}
		else{
			GPIOA->ODR &= ~LED_PIN;
 800037a:	4b04      	ldr	r3, [pc, #16]	; (800038c <main+0x60>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a03      	ldr	r2, [pc, #12]	; (800038c <main+0x60>)
 8000380:	f023 0320 	bic.w	r3, r3, #32
 8000384:	6153      	str	r3, [r2, #20]
		key = UART_Read();
 8000386:	e7e7      	b.n	8000358 <main+0x2c>
 8000388:	40023800 	.word	0x40023800
 800038c:	40020000 	.word	0x40020000
 8000390:	2000001c 	.word	0x2000001c

08000394 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000394:	480d      	ldr	r0, [pc, #52]	; (80003cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000396:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000398:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800039c:	480c      	ldr	r0, [pc, #48]	; (80003d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800039e:	490d      	ldr	r1, [pc, #52]	; (80003d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a0:	4a0d      	ldr	r2, [pc, #52]	; (80003d8 <LoopForever+0xe>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a4:	e002      	b.n	80003ac <LoopCopyDataInit>

080003a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003aa:	3304      	adds	r3, #4

080003ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b0:	d3f9      	bcc.n	80003a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b2:	4a0a      	ldr	r2, [pc, #40]	; (80003dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b4:	4c0a      	ldr	r4, [pc, #40]	; (80003e0 <LoopForever+0x16>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b8:	e001      	b.n	80003be <LoopFillZerobss>

080003ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003bc:	3204      	adds	r2, #4

080003be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c0:	d3fb      	bcc.n	80003ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c2:	f000 f811 	bl	80003e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c6:	f7ff ffb1 	bl	800032c <main>

080003ca <LoopForever>:

LoopForever:
  b LoopForever
 80003ca:	e7fe      	b.n	80003ca <LoopForever>
  ldr   r0, =_estack
 80003cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d8:	08000450 	.word	0x08000450
  ldr r2, =_sbss
 80003dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e0:	20000020 	.word	0x20000020

080003e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC_IRQHandler>
	...

080003e8 <__libc_init_array>:
 80003e8:	b570      	push	{r4, r5, r6, lr}
 80003ea:	4d0d      	ldr	r5, [pc, #52]	; (8000420 <__libc_init_array+0x38>)
 80003ec:	4c0d      	ldr	r4, [pc, #52]	; (8000424 <__libc_init_array+0x3c>)
 80003ee:	1b64      	subs	r4, r4, r5
 80003f0:	10a4      	asrs	r4, r4, #2
 80003f2:	2600      	movs	r6, #0
 80003f4:	42a6      	cmp	r6, r4
 80003f6:	d109      	bne.n	800040c <__libc_init_array+0x24>
 80003f8:	4d0b      	ldr	r5, [pc, #44]	; (8000428 <__libc_init_array+0x40>)
 80003fa:	4c0c      	ldr	r4, [pc, #48]	; (800042c <__libc_init_array+0x44>)
 80003fc:	f000 f818 	bl	8000430 <_init>
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	10a4      	asrs	r4, r4, #2
 8000404:	2600      	movs	r6, #0
 8000406:	42a6      	cmp	r6, r4
 8000408:	d105      	bne.n	8000416 <__libc_init_array+0x2e>
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000410:	4798      	blx	r3
 8000412:	3601      	adds	r6, #1
 8000414:	e7ee      	b.n	80003f4 <__libc_init_array+0xc>
 8000416:	f855 3b04 	ldr.w	r3, [r5], #4
 800041a:	4798      	blx	r3
 800041c:	3601      	adds	r6, #1
 800041e:	e7f2      	b.n	8000406 <__libc_init_array+0x1e>
 8000420:	08000448 	.word	0x08000448
 8000424:	08000448 	.word	0x08000448
 8000428:	08000448 	.word	0x08000448
 800042c:	0800044c 	.word	0x0800044c

08000430 <_init>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr

0800043c <_fini>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr
