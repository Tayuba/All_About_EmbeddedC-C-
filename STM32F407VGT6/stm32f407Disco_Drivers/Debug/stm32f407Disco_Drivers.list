
stm32f407Disco_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000894  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a3c  08000a44  00010a44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a3c  08000a3c  00010a44  2**0
                  CONTENTS
  4 .ARM          00000000  08000a3c  08000a3c  00010a44  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a3c  08000a44  00010a44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a3c  08000a3c  00010a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a40  08000a40  00010a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a44  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010a44  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a54  00000000  00000000  00010a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002a2  00000000  00000000  000114c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00011770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a0  00000000  00000000  00011838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020be  00000000  00000000  000118d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000fd2  00000000  00000000  00013996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008876  00000000  00000000  00014968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001d1de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000268  00000000  00000000  0001d230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a24 	.word	0x08000a24

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a24 	.word	0x08000a24

080001e8 <delay>:

#include <stdint.h>
#include <string.h>
#include "../drivers/Inc/stm32f407xx.h"

void delay(void){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 250000; i++){};
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	0003d08f 	.word	0x0003d08f

08000214 <main>:

#define LOW			0
#define BTNPRESSED 	LOW

int main(void)
{	// LED Configuration
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_LED, GPIO_BTN;
//	memset(&GPIO_LED, 0, sizeof(GPIO_LED));


	GPIO_LED.pGPIOx = GPIOD;
 800021a:	4b18      	ldr	r3, [pc, #96]	; (800027c <main+0x68>)
 800021c:	60fb      	str	r3, [r7, #12]
	GPIO_LED.pGPIO_PinConfig.GPIO_PinNumber 		= GPIO_PIN_NO_12;
 800021e:	230c      	movs	r3, #12
 8000220:	743b      	strb	r3, [r7, #16]
	GPIO_LED.pGPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_OUTPUT;
 8000222:	2301      	movs	r3, #1
 8000224:	747b      	strb	r3, [r7, #17]
	GPIO_LED.pGPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_H;
 8000226:	2302      	movs	r3, #2
 8000228:	74bb      	strb	r3, [r7, #18]
	GPIO_LED.pGPIO_PinConfig.GPIO_PinOPType 		= GPIO_OTY_PUSPUL;
 800022a:	2300      	movs	r3, #0
 800022c:	753b      	strb	r3, [r7, #20]
	GPIO_LED.pGPIO_PinConfig.GPIO_PinPuPdControl 	= GPIO_PUPD_NO;
 800022e:	2300      	movs	r3, #0
 8000230:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriphControl(GPIOD, ENABLE);
 8000232:	2101      	movs	r1, #1
 8000234:	4811      	ldr	r0, [pc, #68]	; (800027c <main+0x68>)
 8000236:	f000 f85d 	bl	80002f4 <GPIO_PeriphControl>
	GPIO_Init(&GPIO_LED);
 800023a:	f107 030c 	add.w	r3, r7, #12
 800023e:	4618      	mov	r0, r3
 8000240:	f000 f940 	bl	80004c4 <GPIO_Init>

//	memset(&GPIO_BTN, 0, sizeof(GPIO_BTN));
	// Button Configuration
	GPIO_BTN.pGPIOx = GPIOD;
 8000244:	4b0d      	ldr	r3, [pc, #52]	; (800027c <main+0x68>)
 8000246:	603b      	str	r3, [r7, #0]
	GPIO_BTN.pGPIO_PinConfig.GPIO_PinNumber 		= GPIO_PIN_NO_5;
 8000248:	2305      	movs	r3, #5
 800024a:	713b      	strb	r3, [r7, #4]
	GPIO_BTN.pGPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_INP_FE_T;
 800024c:	2304      	movs	r3, #4
 800024e:	717b      	strb	r3, [r7, #5]
	GPIO_BTN.pGPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_H;
 8000250:	2302      	movs	r3, #2
 8000252:	71bb      	strb	r3, [r7, #6]
	GPIO_BTN.pGPIO_PinConfig.GPIO_PinPuPdControl 	= GPIO_PUPD_PULUP;
 8000254:	2301      	movs	r3, #1
 8000256:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriphControl(GPIOD, ENABLE);
 8000258:	2101      	movs	r1, #1
 800025a:	4808      	ldr	r0, [pc, #32]	; (800027c <main+0x68>)
 800025c:	f000 f84a 	bl	80002f4 <GPIO_PeriphControl>
	GPIO_Init(&GPIO_BTN);
 8000260:	463b      	mov	r3, r7
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f92e 	bl	80004c4 <GPIO_Init>

//	GPIO_WriteOutputPin(GPIOD, GPIO_PIN_NO_12, GPIO_PIN_RESET);
	// IRQ Configuration
	GPIO_InterruptPriorityConfig(IRQ_EXTI9_5, NVIC_IRQ_PRIORITY_15);
 8000268:	210f      	movs	r1, #15
 800026a:	2017      	movs	r0, #23
 800026c:	f000 fb6c 	bl	8000948 <GPIO_InterruptPriorityConfig>
	GPIO_InterruptConfig(IRQ_EXTI9_5, ENABLE);
 8000270:	2101      	movs	r1, #1
 8000272:	2017      	movs	r0, #23
 8000274:	f000 fae0 	bl	8000838 <GPIO_InterruptConfig>

	while(1){
 8000278:	e7fe      	b.n	8000278 <main+0x64>
 800027a:	bf00      	nop
 800027c:	40020c00 	.word	0x40020c00

08000280 <EXTI9_5_IRQHandler>:
	return 0;


}
// IRQ Handler
void EXTI9_5_IRQHandler(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	delay();
 8000284:	f7ff ffb0 	bl	80001e8 <delay>
	GPIO_IRQHandler(GPIO_PIN_NO_5);
 8000288:	2005      	movs	r0, #5
 800028a:	f000 fb87 	bl	800099c <GPIO_IRQHandler>
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 800028e:	210c      	movs	r1, #12
 8000290:	4802      	ldr	r0, [pc, #8]	; (800029c <EXTI9_5_IRQHandler+0x1c>)
 8000292:	f000 fabb 	bl	800080c <GPIO_ToggleOutputPin>
//
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40020c00 	.word	0x40020c00

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	; (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	; (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 fb85 	bl	80009dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ff9f 	bl	8000214 <main>

080002d6 <LoopForever>:

LoopForever:
  b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	08000a44 	.word	0x08000a44
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	2000001c 	.word	0x2000001c

080002f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC_IRQHandler>
	...

080002f4 <GPIO_PeriphControl>:
 *
 *@return								- none
 *
 *@Note									- none
 */
void GPIO_PeriphControl(GPIO_Reg_t *pGPIOx, uint8_t EnrDis){
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
	if(EnrDis == ENABLE){
 8000300:	78fb      	ldrb	r3, [r7, #3]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d162      	bne.n	80003cc <GPIO_PeriphControl+0xd8>
		if(pGPIOx == GPIOA){
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a64      	ldr	r2, [pc, #400]	; (800049c <GPIO_PeriphControl+0x1a8>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d106      	bne.n	800031c <GPIO_PeriphControl+0x28>
			GPIOA_PCLK_EN();
 800030e:	4b64      	ldr	r3, [pc, #400]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000312:	4a63      	ldr	r2, [pc, #396]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if(pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}
}
 800031a:	e0b9      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOB){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a61      	ldr	r2, [pc, #388]	; (80004a4 <GPIO_PeriphControl+0x1b0>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_PeriphControl+0x3e>
			GPIOB_PCLK_EN();
 8000324:	4b5e      	ldr	r3, [pc, #376]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4a5d      	ldr	r2, [pc, #372]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 800032a:	f043 0302 	orr.w	r3, r3, #2
 800032e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000330:	e0ae      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOC){
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a5c      	ldr	r2, [pc, #368]	; (80004a8 <GPIO_PeriphControl+0x1b4>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIO_PeriphControl+0x54>
			GPIOC_PCLK_EN();
 800033a:	4b59      	ldr	r3, [pc, #356]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033e:	4a58      	ldr	r2, [pc, #352]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000340:	f043 0304 	orr.w	r3, r3, #4
 8000344:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000346:	e0a3      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOD){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a58      	ldr	r2, [pc, #352]	; (80004ac <GPIO_PeriphControl+0x1b8>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIO_PeriphControl+0x6a>
			GPIOD_PCLK_EN();
 8000350:	4b53      	ldr	r3, [pc, #332]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000354:	4a52      	ldr	r2, [pc, #328]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000356:	f043 0308 	orr.w	r3, r3, #8
 800035a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035c:	e098      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOE){
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a53      	ldr	r2, [pc, #332]	; (80004b0 <GPIO_PeriphControl+0x1bc>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIO_PeriphControl+0x80>
			GPIOE_PCLK_EN();
 8000366:	4b4e      	ldr	r3, [pc, #312]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036a:	4a4d      	ldr	r2, [pc, #308]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 800036c:	f043 0310 	orr.w	r3, r3, #16
 8000370:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000372:	e08d      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOF){
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a4f      	ldr	r2, [pc, #316]	; (80004b4 <GPIO_PeriphControl+0x1c0>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d106      	bne.n	800038a <GPIO_PeriphControl+0x96>
			GPIOF_PCLK_EN();
 800037c:	4b48      	ldr	r3, [pc, #288]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000380:	4a47      	ldr	r2, [pc, #284]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000382:	f043 0320 	orr.w	r3, r3, #32
 8000386:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000388:	e082      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOG){
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a4a      	ldr	r2, [pc, #296]	; (80004b8 <GPIO_PeriphControl+0x1c4>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d106      	bne.n	80003a0 <GPIO_PeriphControl+0xac>
			GPIOG_PCLK_EN();
 8000392:	4b43      	ldr	r3, [pc, #268]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000396:	4a42      	ldr	r2, [pc, #264]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800039c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039e:	e077      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOH){
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a46      	ldr	r2, [pc, #280]	; (80004bc <GPIO_PeriphControl+0x1c8>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d106      	bne.n	80003b6 <GPIO_PeriphControl+0xc2>
			GPIOH_PCLK_EN();
 80003a8:	4b3d      	ldr	r3, [pc, #244]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ac:	4a3c      	ldr	r2, [pc, #240]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 80003ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b4:	e06c      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOI){
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a41      	ldr	r2, [pc, #260]	; (80004c0 <GPIO_PeriphControl+0x1cc>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d168      	bne.n	8000490 <GPIO_PeriphControl+0x19c>
			GPIOI_PCLK_EN();
 80003be:	4b38      	ldr	r3, [pc, #224]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c2:	4a37      	ldr	r2, [pc, #220]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 80003c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ca:	e061      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		if(pGPIOx == GPIOA){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a33      	ldr	r2, [pc, #204]	; (800049c <GPIO_PeriphControl+0x1a8>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_PeriphControl+0xee>
			GPIOA_PCLK_DI();
 80003d4:	4b32      	ldr	r3, [pc, #200]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d8:	4a31      	ldr	r2, [pc, #196]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 80003da:	f023 0301 	bic.w	r3, r3, #1
 80003de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e0:	e056      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOB){
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a2f      	ldr	r2, [pc, #188]	; (80004a4 <GPIO_PeriphControl+0x1b0>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PeriphControl+0x104>
			GPIOB_PCLK_DI();
 80003ea:	4b2d      	ldr	r3, [pc, #180]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ee:	4a2c      	ldr	r2, [pc, #176]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 80003f0:	f023 0302 	bic.w	r3, r3, #2
 80003f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f6:	e04b      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOC){
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a2b      	ldr	r2, [pc, #172]	; (80004a8 <GPIO_PeriphControl+0x1b4>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d106      	bne.n	800040e <GPIO_PeriphControl+0x11a>
			GPIOC_PCLK_DI();
 8000400:	4b27      	ldr	r3, [pc, #156]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000404:	4a26      	ldr	r2, [pc, #152]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000406:	f023 0304 	bic.w	r3, r3, #4
 800040a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040c:	e040      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOD){
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a26      	ldr	r2, [pc, #152]	; (80004ac <GPIO_PeriphControl+0x1b8>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriphControl+0x130>
			GPIOD_PCLK_DI();
 8000416:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	4a21      	ldr	r2, [pc, #132]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 800041c:	f023 0308 	bic.w	r3, r3, #8
 8000420:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000422:	e035      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOE){
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a22      	ldr	r2, [pc, #136]	; (80004b0 <GPIO_PeriphControl+0x1bc>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriphControl+0x146>
			GPIOE_PCLK_DI();
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000430:	4a1b      	ldr	r2, [pc, #108]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000432:	f023 0310 	bic.w	r3, r3, #16
 8000436:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000438:	e02a      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOF){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a1d      	ldr	r2, [pc, #116]	; (80004b4 <GPIO_PeriphControl+0x1c0>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriphControl+0x15c>
			GPIOF_PCLK_DI();
 8000442:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	4a16      	ldr	r2, [pc, #88]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000448:	f023 0320 	bic.w	r3, r3, #32
 800044c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044e:	e01f      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOG){
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a19      	ldr	r2, [pc, #100]	; (80004b8 <GPIO_PeriphControl+0x1c4>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PeriphControl+0x172>
			GPIOG_PCLK_DI();
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 800045e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000462:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000464:	e014      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOH){
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a14      	ldr	r2, [pc, #80]	; (80004bc <GPIO_PeriphControl+0x1c8>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_PeriphControl+0x188>
			GPIOH_PCLK_DI();
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047a:	e009      	b.n	8000490 <GPIO_PeriphControl+0x19c>
		else if(pGPIOx == GPIOI){
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <GPIO_PeriphControl+0x1cc>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d105      	bne.n	8000490 <GPIO_PeriphControl+0x19c>
			GPIOI_PCLK_DI();
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4a05      	ldr	r2, [pc, #20]	; (80004a0 <GPIO_PeriphControl+0x1ac>)
 800048a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800048e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	40020000 	.word	0x40020000
 80004a0:	40023800 	.word	0x40023800
 80004a4:	40020400 	.word	0x40020400
 80004a8:	40020800 	.word	0x40020800
 80004ac:	40020c00 	.word	0x40020c00
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40021400 	.word	0x40021400
 80004b8:	40021800 	.word	0x40021800
 80004bc:	40021c00 	.word	0x40021c00
 80004c0:	40022000 	.word	0x40022000

080004c4 <GPIO_Init>:
 *
 *@return								- none
 *
 *@Note									- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004c4:	b480      	push	{r7}
 80004c6:	b087      	sub	sp, #28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; //hold register mode temporary
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->pGPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	795b      	ldrb	r3, [r3, #5]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d81f      	bhi.n	8000518 <GPIO_Init+0x54>
		//Mode
		temp = (pGPIOHandle->pGPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	795b      	ldrb	r3, [r3, #5]
 80004dc:	461a      	mov	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	791b      	ldrb	r3, [r3, #4]
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	fa02 f303 	lsl.w	r3, r2, r3
 80004e8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber); 	    //clearing
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	791b      	ldrb	r3, [r3, #4]
 80004f4:	4619      	mov	r1, r3
 80004f6:	2303      	movs	r3, #3
 80004f8:	408b      	lsls	r3, r1
 80004fa:	43db      	mvns	r3, r3
 80004fc:	4619      	mov	r1, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	400a      	ands	r2, r1
 8000504:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; 														// setting
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6819      	ldr	r1, [r3, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	697a      	ldr	r2, [r7, #20]
 8000512:	430a      	orrs	r2, r1
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	e0cd      	b.n	80006b4 <GPIO_Init+0x1f0>
		// Configure GPIO port to selection  in SYSCG

		// Interrupt request from line x is not masked

		/* Interrupt mode, at peripheral side */
		if(pGPIOHandle->pGPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INP_FE_T){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	795b      	ldrb	r3, [r3, #5]
 800051c:	2b04      	cmp	r3, #4
 800051e:	d117      	bne.n	8000550 <GPIO_Init+0x8c>
//			pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber);
			// Falling Edge trigger configured
			EXTI->FTSR |= (1 << pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber); 					    // set falling edge
 8000520:	4b49      	ldr	r3, [pc, #292]	; (8000648 <GPIO_Init+0x184>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	7912      	ldrb	r2, [r2, #4]
 8000528:	4611      	mov	r1, r2
 800052a:	2201      	movs	r2, #1
 800052c:	408a      	lsls	r2, r1
 800052e:	4611      	mov	r1, r2
 8000530:	4a45      	ldr	r2, [pc, #276]	; (8000648 <GPIO_Init+0x184>)
 8000532:	430b      	orrs	r3, r1
 8000534:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber); 					    // reset rising edge
 8000536:	4b44      	ldr	r3, [pc, #272]	; (8000648 <GPIO_Init+0x184>)
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	7912      	ldrb	r2, [r2, #4]
 800053e:	4611      	mov	r1, r2
 8000540:	2201      	movs	r2, #1
 8000542:	408a      	lsls	r2, r1
 8000544:	43d2      	mvns	r2, r2
 8000546:	4611      	mov	r1, r2
 8000548:	4a3f      	ldr	r2, [pc, #252]	; (8000648 <GPIO_Init+0x184>)
 800054a:	400b      	ands	r3, r1
 800054c:	6093      	str	r3, [r2, #8]
 800054e:	e035      	b.n	80005bc <GPIO_Init+0xf8>

		}else if(pGPIOHandle->pGPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INP_RE_T){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	795b      	ldrb	r3, [r3, #5]
 8000554:	2b05      	cmp	r3, #5
 8000556:	d117      	bne.n	8000588 <GPIO_Init+0xc4>
			// Rising Edge trigger configured
			EXTI->RTSR |= (1 << pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber); 					     // set rising edge
 8000558:	4b3b      	ldr	r3, [pc, #236]	; (8000648 <GPIO_Init+0x184>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	7912      	ldrb	r2, [r2, #4]
 8000560:	4611      	mov	r1, r2
 8000562:	2201      	movs	r2, #1
 8000564:	408a      	lsls	r2, r1
 8000566:	4611      	mov	r1, r2
 8000568:	4a37      	ldr	r2, [pc, #220]	; (8000648 <GPIO_Init+0x184>)
 800056a:	430b      	orrs	r3, r1
 800056c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber); 					     // reset falling edge
 800056e:	4b36      	ldr	r3, [pc, #216]	; (8000648 <GPIO_Init+0x184>)
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	7912      	ldrb	r2, [r2, #4]
 8000576:	4611      	mov	r1, r2
 8000578:	2201      	movs	r2, #1
 800057a:	408a      	lsls	r2, r1
 800057c:	43d2      	mvns	r2, r2
 800057e:	4611      	mov	r1, r2
 8000580:	4a31      	ldr	r2, [pc, #196]	; (8000648 <GPIO_Init+0x184>)
 8000582:	400b      	ands	r3, r1
 8000584:	60d3      	str	r3, [r2, #12]
 8000586:	e019      	b.n	80005bc <GPIO_Init+0xf8>

		}else if(pGPIOHandle->pGPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INP_FERE_T){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	795b      	ldrb	r3, [r3, #5]
 800058c:	2b06      	cmp	r3, #6
 800058e:	d115      	bne.n	80005bc <GPIO_Init+0xf8>
			//  Both Falling and Rising Edge trigger configured
			EXTI->FTSR |= (1 << pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber); 						 // set falling edge
 8000590:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <GPIO_Init+0x184>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	7912      	ldrb	r2, [r2, #4]
 8000598:	4611      	mov	r1, r2
 800059a:	2201      	movs	r2, #1
 800059c:	408a      	lsls	r2, r1
 800059e:	4611      	mov	r1, r2
 80005a0:	4a29      	ldr	r2, [pc, #164]	; (8000648 <GPIO_Init+0x184>)
 80005a2:	430b      	orrs	r3, r1
 80005a4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber); 						 // set rising edge
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <GPIO_Init+0x184>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	7912      	ldrb	r2, [r2, #4]
 80005ae:	4611      	mov	r1, r2
 80005b0:	2201      	movs	r2, #1
 80005b2:	408a      	lsls	r2, r1
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a24      	ldr	r2, [pc, #144]	; (8000648 <GPIO_Init+0x184>)
 80005b8:	430b      	orrs	r3, r1
 80005ba:	6093      	str	r3, [r2, #8]
		}

		SYSCFG_PCLK_EN();
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <GPIO_Init+0x188>)
 80005be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005c0:	4a22      	ldr	r2, [pc, #136]	; (800064c <GPIO_Init+0x188>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c6:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t temp1, temp2;
		uint8_t portCode = GPIO_BASE_TO_PORTCODE(pGPIOHandle->pGPIOx);								   // REturn the port code(PA...PI for the EXTI register
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a20      	ldr	r2, [pc, #128]	; (8000650 <GPIO_Init+0x18c>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d050      	beq.n	8000674 <GPIO_Init+0x1b0>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a1f      	ldr	r2, [pc, #124]	; (8000654 <GPIO_Init+0x190>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d032      	beq.n	8000642 <GPIO_Init+0x17e>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <GPIO_Init+0x194>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d02b      	beq.n	800063e <GPIO_Init+0x17a>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a1c      	ldr	r2, [pc, #112]	; (800065c <GPIO_Init+0x198>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d024      	beq.n	800063a <GPIO_Init+0x176>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <GPIO_Init+0x19c>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d01d      	beq.n	8000636 <GPIO_Init+0x172>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <GPIO_Init+0x1a0>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d016      	beq.n	8000632 <GPIO_Init+0x16e>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a17      	ldr	r2, [pc, #92]	; (8000668 <GPIO_Init+0x1a4>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d00f      	beq.n	800062e <GPIO_Init+0x16a>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a16      	ldr	r2, [pc, #88]	; (800066c <GPIO_Init+0x1a8>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d008      	beq.n	800062a <GPIO_Init+0x166>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a14      	ldr	r2, [pc, #80]	; (8000670 <GPIO_Init+0x1ac>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d101      	bne.n	8000626 <GPIO_Init+0x162>
 8000622:	2308      	movs	r3, #8
 8000624:	e027      	b.n	8000676 <GPIO_Init+0x1b2>
 8000626:	2300      	movs	r3, #0
 8000628:	e025      	b.n	8000676 <GPIO_Init+0x1b2>
 800062a:	2307      	movs	r3, #7
 800062c:	e023      	b.n	8000676 <GPIO_Init+0x1b2>
 800062e:	2306      	movs	r3, #6
 8000630:	e021      	b.n	8000676 <GPIO_Init+0x1b2>
 8000632:	2305      	movs	r3, #5
 8000634:	e01f      	b.n	8000676 <GPIO_Init+0x1b2>
 8000636:	2304      	movs	r3, #4
 8000638:	e01d      	b.n	8000676 <GPIO_Init+0x1b2>
 800063a:	2303      	movs	r3, #3
 800063c:	e01b      	b.n	8000676 <GPIO_Init+0x1b2>
 800063e:	2302      	movs	r3, #2
 8000640:	e019      	b.n	8000676 <GPIO_Init+0x1b2>
 8000642:	2301      	movs	r3, #1
 8000644:	e017      	b.n	8000676 <GPIO_Init+0x1b2>
 8000646:	bf00      	nop
 8000648:	40013c00 	.word	0x40013c00
 800064c:	40023800 	.word	0x40023800
 8000650:	40020000 	.word	0x40020000
 8000654:	40020400 	.word	0x40020400
 8000658:	40020800 	.word	0x40020800
 800065c:	40020c00 	.word	0x40020c00
 8000660:	40021000 	.word	0x40021000
 8000664:	40021400 	.word	0x40021400
 8000668:	40021800 	.word	0x40021800
 800066c:	40021c00 	.word	0x40021c00
 8000670:	40022000 	.word	0x40022000
 8000674:	2300      	movs	r3, #0
 8000676:	74fb      	strb	r3, [r7, #19]
		temp1 = pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber / 4;                                	   // Select which EXTI(0...3) register to Configure
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	089b      	lsrs	r3, r3, #2
 800067e:	74bb      	strb	r3, [r7, #18]
		temp2 = pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber % 4;									   // Select which EXTI?(0...15) bit to store values
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	f003 0303 	and.w	r3, r3, #3
 8000688:	747b      	strb	r3, [r7, #17]
																					   // Enable SYSCFG clock
		SYSCFG->EXTICR[temp1] = (portCode << (4 * temp2));											   // Select EXTIx register and the respective bits
 800068a:	7cfa      	ldrb	r2, [r7, #19]
 800068c:	7c7b      	ldrb	r3, [r7, #17]
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	fa02 f103 	lsl.w	r1, r2, r3
 8000694:	4a5b      	ldr	r2, [pc, #364]	; (8000804 <GPIO_Init+0x340>)
 8000696:	7cbb      	ldrb	r3, [r7, #18]
 8000698:	3302      	adds	r3, #2
 800069a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		EXTI->IMR |= (1 << pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber);
 800069e:	4b5a      	ldr	r3, [pc, #360]	; (8000808 <GPIO_Init+0x344>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	7912      	ldrb	r2, [r2, #4]
 80006a6:	4611      	mov	r1, r2
 80006a8:	2201      	movs	r2, #1
 80006aa:	408a      	lsls	r2, r1
 80006ac:	4611      	mov	r1, r2
 80006ae:	4a56      	ldr	r2, [pc, #344]	; (8000808 <GPIO_Init+0x344>)
 80006b0:	430b      	orrs	r3, r1
 80006b2:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]

	//Speed
	temp = (pGPIOHandle->pGPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber));
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	799b      	ldrb	r3, [r3, #6]
 80006bc:	461a      	mov	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
 80006c8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 <<  pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber); 			  // clearing
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	689a      	ldr	r2, [r3, #8]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	4619      	mov	r1, r3
 80006d6:	2303      	movs	r3, #3
 80006d8:	408b      	lsls	r3, r1
 80006da:	43db      	mvns	r3, r3
 80006dc:	4619      	mov	r1, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	400a      	ands	r2, r1
 80006e4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; 																  // setting
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6899      	ldr	r1, [r3, #8]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	430a      	orrs	r2, r1
 80006f4:	609a      	str	r2, [r3, #8]
	temp = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]

	//Pull up Pull down
	temp = (pGPIOHandle->pGPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber));
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	79db      	ldrb	r3, [r3, #7]
 80006fe:	461a      	mov	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 <<  pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber); 					// clearing
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	68da      	ldr	r2, [r3, #12]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	4619      	mov	r1, r3
 8000718:	2303      	movs	r3, #3
 800071a:	408b      	lsls	r3, r1
 800071c:	43db      	mvns	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	400a      	ands	r2, r1
 8000726:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; 																	//setting
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	68d9      	ldr	r1, [r3, #12]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	430a      	orrs	r2, r1
 8000736:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->pGPIOx->MODER == GPIO_MODE_OUTPUT){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d11f      	bne.n	8000786 <GPIO_Init+0x2c2>
		//Output Type
		temp = (pGPIOHandle->pGPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber));
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	7a1b      	ldrb	r3, [r3, #8]
 800074a:	461a      	mov	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	791b      	ldrb	r3, [r3, #4]
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 <<  pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber); 					 // clearing
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	685a      	ldr	r2, [r3, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	4619      	mov	r1, r3
 8000762:	2301      	movs	r3, #1
 8000764:	408b      	lsls	r3, r1
 8000766:	43db      	mvns	r3, r3
 8000768:	4619      	mov	r1, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	400a      	ands	r2, r1
 8000770:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp; 																	 //setting
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	6859      	ldr	r1, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	430a      	orrs	r2, r1
 8000780:	605a      	str	r2, [r3, #4]
		temp = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
	}


	//Alternative Function
	if(pGPIOHandle->pGPIO_PinConfig.GPIO_PinAlteFuncMode == GPIO_MODE_ALTFUNC){
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	7a5b      	ldrb	r3, [r3, #9]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d133      	bne.n	80007f6 <GPIO_Init+0x332>
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber / 8;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	791b      	ldrb	r3, [r3, #4]
 8000792:	08db      	lsrs	r3, r3, #3
 8000794:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->pGPIO_PinConfig.GPIO_PinNumber % 8;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(pGPIOHandle->pGPIO_PinConfig.GPIO_PinAlteFuncMode << (4 * temp2 )); // clearing
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	7c3a      	ldrb	r2, [r7, #16]
 80007a6:	3208      	adds	r2, #8
 80007a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7a5b      	ldrb	r3, [r3, #9]
 80007b0:	461a      	mov	r2, r3
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43db      	mvns	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	7c3a      	ldrb	r2, [r7, #16]
 80007c4:	4001      	ands	r1, r0
 80007c6:	3208      	adds	r2, #8
 80007c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->pGPIO_PinConfig.GPIO_PinAlteFuncMode << (4 * temp2 ));	 // setting
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	7c3a      	ldrb	r2, [r7, #16]
 80007d2:	3208      	adds	r2, #8
 80007d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	7a5b      	ldrb	r3, [r3, #9]
 80007dc:	461a      	mov	r2, r3
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	7c3a      	ldrb	r2, [r7, #16]
 80007ee:	4301      	orrs	r1, r0
 80007f0:	3208      	adds	r2, #8
 80007f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80007f6:	bf00      	nop
 80007f8:	371c      	adds	r7, #28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40013800 	.word	0x40013800
 8000808:	40013c00 	.word	0x40013c00

0800080c <GPIO_ToggleOutputPin>:
	}
}
void GPIO_WriteOutputPort(GPIO_Reg_t *pGPIOx, uint8_t Val){
	pGPIOx->ODR = Val;
}
void GPIO_ToggleOutputPin(GPIO_Reg_t *pGPIOx, uint8_t PinNum){
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNum);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	78fa      	ldrb	r2, [r7, #3]
 800081e:	2101      	movs	r1, #1
 8000820:	fa01 f202 	lsl.w	r2, r1, r2
 8000824:	405a      	eors	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	615a      	str	r2, [r3, #20]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <GPIO_InterruptConfig>:
 *@return								- none
 *
 *@Note									- Even though Cortex M4 has 8 Nested Vector Interrupt Controllers available (NVIC),
 *										  STM32F407 does not use more than three of this NVIC
 */
void GPIO_InterruptConfig(uint8_t IRQNum, uint8_t EnrDis){
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	460a      	mov	r2, r1
 8000842:	71fb      	strb	r3, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	71bb      	strb	r3, [r7, #6]
	if(EnrDis == ENABLE){
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d133      	bne.n	80008b6 <GPIO_InterruptConfig+0x7e>
		if(IRQNum <= 31){
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b1f      	cmp	r3, #31
 8000852:	d80a      	bhi.n	800086a <GPIO_InterruptConfig+0x32>
			// ISRE0 Register is to be programmed
			*(NVIC_ISERO) |= (1 << IRQNum);
 8000854:	4b36      	ldr	r3, [pc, #216]	; (8000930 <GPIO_InterruptConfig+0xf8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	2101      	movs	r1, #1
 800085c:	fa01 f202 	lsl.w	r2, r1, r2
 8000860:	4611      	mov	r1, r2
 8000862:	4a33      	ldr	r2, [pc, #204]	; (8000930 <GPIO_InterruptConfig+0xf8>)
 8000864:	430b      	orrs	r3, r1
 8000866:	6013      	str	r3, [r2, #0]
		} else if(IRQNum >= 64 && IRQNum <96){
			// ICRE2 Register is to be programmed
			*(NVIC_ICER2) |= (1 << (IRQNum % 64));
		}
	}
}
 8000868:	e05b      	b.n	8000922 <GPIO_InterruptConfig+0xea>
		} else if(IRQNum >= 31 && IRQNum <64){
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b1e      	cmp	r3, #30
 800086e:	d90f      	bls.n	8000890 <GPIO_InterruptConfig+0x58>
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b3f      	cmp	r3, #63	; 0x3f
 8000874:	d80c      	bhi.n	8000890 <GPIO_InterruptConfig+0x58>
			*(NVIC_ISER1) |= (1 << (IRQNum % 32));
 8000876:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <GPIO_InterruptConfig+0xfc>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	f002 021f 	and.w	r2, r2, #31
 8000880:	2101      	movs	r1, #1
 8000882:	fa01 f202 	lsl.w	r2, r1, r2
 8000886:	4611      	mov	r1, r2
 8000888:	4a2a      	ldr	r2, [pc, #168]	; (8000934 <GPIO_InterruptConfig+0xfc>)
 800088a:	430b      	orrs	r3, r1
 800088c:	6013      	str	r3, [r2, #0]
 800088e:	e048      	b.n	8000922 <GPIO_InterruptConfig+0xea>
		} else if(IRQNum >= 64 && IRQNum <96){
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2b3f      	cmp	r3, #63	; 0x3f
 8000894:	d945      	bls.n	8000922 <GPIO_InterruptConfig+0xea>
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b5f      	cmp	r3, #95	; 0x5f
 800089a:	d842      	bhi.n	8000922 <GPIO_InterruptConfig+0xea>
			*(NVIC_ISER2) |= (1 << (IRQNum % 64));
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <GPIO_InterruptConfig+0x100>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	79fa      	ldrb	r2, [r7, #7]
 80008a2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008a6:	2101      	movs	r1, #1
 80008a8:	fa01 f202 	lsl.w	r2, r1, r2
 80008ac:	4611      	mov	r1, r2
 80008ae:	4a22      	ldr	r2, [pc, #136]	; (8000938 <GPIO_InterruptConfig+0x100>)
 80008b0:	430b      	orrs	r3, r1
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	e035      	b.n	8000922 <GPIO_InterruptConfig+0xea>
		if(IRQNum <= 31){
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b1f      	cmp	r3, #31
 80008ba:	d80c      	bhi.n	80008d6 <GPIO_InterruptConfig+0x9e>
			*(NVIC_ICERO) |= (1 << (IRQNum % 32));
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <GPIO_InterruptConfig+0x104>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	f002 021f 	and.w	r2, r2, #31
 80008c6:	2101      	movs	r1, #1
 80008c8:	fa01 f202 	lsl.w	r2, r1, r2
 80008cc:	4611      	mov	r1, r2
 80008ce:	4a1b      	ldr	r2, [pc, #108]	; (800093c <GPIO_InterruptConfig+0x104>)
 80008d0:	430b      	orrs	r3, r1
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	e025      	b.n	8000922 <GPIO_InterruptConfig+0xea>
		} else if(IRQNum >= 31 && IRQNum <64){
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b1e      	cmp	r3, #30
 80008da:	d90f      	bls.n	80008fc <GPIO_InterruptConfig+0xc4>
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b3f      	cmp	r3, #63	; 0x3f
 80008e0:	d80c      	bhi.n	80008fc <GPIO_InterruptConfig+0xc4>
			*(NVIC_ICER1) |= (1 << (IRQNum % 32));
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <GPIO_InterruptConfig+0x108>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	79fa      	ldrb	r2, [r7, #7]
 80008e8:	f002 021f 	and.w	r2, r2, #31
 80008ec:	2101      	movs	r1, #1
 80008ee:	fa01 f202 	lsl.w	r2, r1, r2
 80008f2:	4611      	mov	r1, r2
 80008f4:	4a12      	ldr	r2, [pc, #72]	; (8000940 <GPIO_InterruptConfig+0x108>)
 80008f6:	430b      	orrs	r3, r1
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	e012      	b.n	8000922 <GPIO_InterruptConfig+0xea>
		} else if(IRQNum >= 64 && IRQNum <96){
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000900:	d90f      	bls.n	8000922 <GPIO_InterruptConfig+0xea>
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b5f      	cmp	r3, #95	; 0x5f
 8000906:	d80c      	bhi.n	8000922 <GPIO_InterruptConfig+0xea>
			*(NVIC_ICER2) |= (1 << (IRQNum % 64));
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <GPIO_InterruptConfig+0x10c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000912:	2101      	movs	r1, #1
 8000914:	fa01 f202 	lsl.w	r2, r1, r2
 8000918:	4611      	mov	r1, r2
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <GPIO_InterruptConfig+0x10c>)
 800091c:	430b      	orrs	r3, r1
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	e7ff      	b.n	8000922 <GPIO_InterruptConfig+0xea>
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000e104 	.word	0xe000e104
 8000938:	e000e108 	.word	0xe000e108
 800093c:	e000e180 	.word	0xe000e180
 8000940:	e000e184 	.word	0xe000e184
 8000944:	e000e188 	.word	0xe000e188

08000948 <GPIO_InterruptPriorityConfig>:
 *@Note									- One interrupt priority register is enough since only 3 interrupt set-enable registers are used.
 *										  One interrupt priority register is divided into four sections, for which each section handles one interrupt set-enable registers.
 *										  Priority bits implementation are done in most-significant bit of the section of the register, and the number of implementation is
 *										  processor specific, so kindly check MCU providers ref. manual
 */
void GPIO_InterruptPriorityConfig(uint8_t IRQNum, uint32_t IRQ_Priority){
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx 		 = IRQNum / 4; 																			// To select interrupt priority register
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	089b      	lsrs	r3, r3, #2
 8000958:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNum % 4;       																	// To select section of selected interrupt priority register above
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f003 0303 	and.w	r3, r3, #3
 8000960:	73bb      	strb	r3, [r7, #14]
	uint8_t amount_shift = (8 * iprx_section) + (8 - STM32F407_PR_BIT_IMPLEMENTED); 							// STM32F407_PR_BIT_IMPLEMENTED has 4 bit implementation of priority, MCU such as TI.
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	b2db      	uxtb	r3, r3
 8000968:	3304      	adds	r3, #4
 800096a:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASE_ADDR + iprx) |= (IRQ_Priority << amount_shift);
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000974:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000978:	6819      	ldr	r1, [r3, #0]
 800097a:	7b7b      	ldrb	r3, [r7, #13]
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	409a      	lsls	r2, r3
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000988:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <GPIO_IRQHandler>:

// Interrupt Service Routine
void GPIO_IRQHandler(uint8_t PinNum){
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	// checking the EXTI PR register corresponding to the pin number, set or not
	if(EXTI->PR & (1 << PinNum)){
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <GPIO_IRQHandler+0x3c>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	2101      	movs	r1, #1
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	4013      	ands	r3, r2
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d009      	beq.n	80009cc <GPIO_IRQHandler+0x30>
		// Clear if set
		EXTI->PR |= (1 << PinNum);
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <GPIO_IRQHandler+0x3c>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	79fa      	ldrb	r2, [r7, #7]
 80009be:	2101      	movs	r1, #1
 80009c0:	fa01 f202 	lsl.w	r2, r1, r2
 80009c4:	4611      	mov	r1, r2
 80009c6:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <GPIO_IRQHandler+0x3c>)
 80009c8:	430b      	orrs	r3, r1
 80009ca:	6153      	str	r3, [r2, #20]
	}
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40013c00 	.word	0x40013c00

080009dc <__libc_init_array>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	4d0d      	ldr	r5, [pc, #52]	; (8000a14 <__libc_init_array+0x38>)
 80009e0:	4c0d      	ldr	r4, [pc, #52]	; (8000a18 <__libc_init_array+0x3c>)
 80009e2:	1b64      	subs	r4, r4, r5
 80009e4:	10a4      	asrs	r4, r4, #2
 80009e6:	2600      	movs	r6, #0
 80009e8:	42a6      	cmp	r6, r4
 80009ea:	d109      	bne.n	8000a00 <__libc_init_array+0x24>
 80009ec:	4d0b      	ldr	r5, [pc, #44]	; (8000a1c <__libc_init_array+0x40>)
 80009ee:	4c0c      	ldr	r4, [pc, #48]	; (8000a20 <__libc_init_array+0x44>)
 80009f0:	f000 f818 	bl	8000a24 <_init>
 80009f4:	1b64      	subs	r4, r4, r5
 80009f6:	10a4      	asrs	r4, r4, #2
 80009f8:	2600      	movs	r6, #0
 80009fa:	42a6      	cmp	r6, r4
 80009fc:	d105      	bne.n	8000a0a <__libc_init_array+0x2e>
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a04:	4798      	blx	r3
 8000a06:	3601      	adds	r6, #1
 8000a08:	e7ee      	b.n	80009e8 <__libc_init_array+0xc>
 8000a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a0e:	4798      	blx	r3
 8000a10:	3601      	adds	r6, #1
 8000a12:	e7f2      	b.n	80009fa <__libc_init_array+0x1e>
 8000a14:	08000a3c 	.word	0x08000a3c
 8000a18:	08000a3c 	.word	0x08000a3c
 8000a1c:	08000a3c 	.word	0x08000a3c
 8000a20:	08000a40 	.word	0x08000a40

08000a24 <_init>:
 8000a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a26:	bf00      	nop
 8000a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a2a:	bc08      	pop	{r3}
 8000a2c:	469e      	mov	lr, r3
 8000a2e:	4770      	bx	lr

08000a30 <_fini>:
 8000a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a32:	bf00      	nop
 8000a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a36:	bc08      	pop	{r3}
 8000a38:	469e      	mov	lr, r3
 8000a3a:	4770      	bx	lr
